/*
閉包（Closure）：

1. 全局變數的特點：
   - 全局變數常駐內存。
   - 全局變數會污染全域作用域。

2. 局部變數的特點：
   - 不常駐內存，會被垃圾回收機制釋放。
   - 不會污染全域。

---

💡 想實現的功能：
   1. 常駐內存
   2. 不污染全局

➡️ 解法：用「閉包」來實現。

---

🔁 閉包是什麼？

閉包 = 函式中嵌套函式，內部函式引用了外部函式的變數或參數。

👉 因此，內部函式即使離開了定義它的上下文，依然可以「記住」那些變數。

---

📌 常見寫法：

Function outer() {
  int count = 0;

  return () {
    count++;
    print(count);
  };
}

void main() {
  var counter = outer(); // outer() 回傳一個「匿名函式」，這個匿名函式就是閉包
  counter(); // 輸出 1
  counter(); // 輸出 2
}

---

📎 特性整理：

- 閉包會「捕捉」外部變數，讓它們不會被回收。
- 每次呼叫 outer() 會產生新的閉包（有自己的獨立變數）。
- 適合做：計數器、封裝私有狀態、不讓外部直接存取的資料。

*/

/* 📌 常見寫法 */

Function outer() {  /* 不會汙染全局 常駐內存 */
  int count = 0;

  return () {
    count++;
    print(count);
  };
}

void main() {
  var counter = outer(); // outer() 回傳一個「匿名函式」，這個匿名函式就是閉包
  counter(); // 輸出 1
  counter(); // 輸出 2
}
